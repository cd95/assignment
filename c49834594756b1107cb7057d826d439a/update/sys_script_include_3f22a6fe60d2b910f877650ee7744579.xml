<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_1142001_now_mech.VehicleMethods</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>VehicleMethods</name>
        <script><![CDATA[var VehicleMethods = Class.create();
VehicleMethods.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
    getVehicleTypes: function() {
        gs.info("Call Received");
        try {
            var columnName = 'type';
            // var vehicleGlideRecord = new GlideRecord('x_1142001_now_mech_vehicle');
            var agg = new GlideAggregate('x_1142001_now_mech_vehicle');
            agg.addNotNullQuery(columnName);
            agg.addAggregate('GROUPBY', columnName);
            agg.query();
            var uniqueValues = [];
            while (agg.next()) {
                var value = agg.getValue(columnName)
                gs.info("value" + agg.getValue(columnName));
                var json = {
                    'value': value,
                    'label': value
                };
                uniqueValues.push(json);
            }
            return JSON.stringify(uniqueValues);

        } catch (error) {
            gs.error(error);
        }


    },
    getVehicleBrandsByType: function() {
        try {
            var vehicleType = this.getParameter('sysparm_vehicleType');
            var vehicleGlideRecord = new GlideRecord('x_1142001_now_mech_vehicle');
            vehicleGlideRecord.addQuery('type', vehicleType);
            vehicleGlideRecord.query();
            var columnName = 'brand';
            var result = [];
            while (vehicleGlideRecord.next()) {
                var value = vehicleGlideRecord.getValue(columnName)
                gs.info("value" + value);
                var json = {
                    'value': value,
                    'label': value
                };
                result.push(json);
            }
            return JSON.stringify(result);

        } catch (error) {
            gs.error(error);
        }
    },
    getVehicleModelsByBrand: function() {
        try {
            var vehicleType = this.getParameter('sysparm_vehicleType');
            var vehicleBrand = this.getParameter('sysparm_vehicleBrand');
            var vehicleGlideRecord = new GlideRecord('x_1142001_now_mech_vehicle');
            vehicleGlideRecord.addQuery('type', vehicleType);
            vehicleGlideRecord.addQuery('brand', vehicleBrand);
            vehicleGlideRecord.query();
            var columnName = 'model';
            var result = [];
            while (vehicleGlideRecord.next()) {
                var value = vehicleGlideRecord.getValue(columnName);
                gs.info("value" + value);
                var json = {
                    'value': value,
                    'label': value
                };
                result.push(json);
            }
            return JSON.stringify(result);

        } catch (error) {
            gs.error(error);
        }
    },
    getVehicleFuelTypeByModel: function() {
        try {
            var vehicleType = this.getParameter('sysparm_vehicleType');
            var vehicleBrand = this.getParameter('sysparm_vehicleBrand');
            var vehicleModel = this.getParameter('sysparm_vehicleModel');
            var vehicleGlideRecord = new GlideRecord('x_1142001_now_mech_vehicle');
            vehicleGlideRecord.addQuery('type', vehicleType);
            vehicleGlideRecord.addQuery('brand', vehicleBrand);
            vehicleGlideRecord.addQuery('model', vehicleModel);
            vehicleGlideRecord.query();
            var columnName = 'fuel_type';
            var result = [];
            while (vehicleGlideRecord.next()) {
                var value = vehicleGlideRecord.getValue(columnName);
                gs.info("value" + value);
                var json = {
                    'value': value,
                    'label': value
                };
                result.push(json);
            }
            return JSON.stringify(result);

        } catch (error) {
            gs.error(error);
        }
    },
    type: 'VehicleMethods'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>maint</sys_created_by>
        <sys_created_on>2023-11-08 05:35:51</sys_created_on>
        <sys_id>3f22a6fe60d2b910f877650ee7744579</sys_id>
        <sys_mod_count>17</sys_mod_count>
        <sys_name>VehicleMethods</sys_name>
        <sys_package display_value="Now Mechanic" source="x_1142001_now_mech">c49834594756b1107cb7057d826d439a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Now Mechanic">c49834594756b1107cb7057d826d439a</sys_scope>
        <sys_update_name>sys_script_include_3f22a6fe60d2b910f877650ee7744579</sys_update_name>
        <sys_updated_by>maint</sys_updated_by>
        <sys_updated_on>2023-11-08 10:40:15</sys_updated_on>
    </sys_script_include>
</record_update>
